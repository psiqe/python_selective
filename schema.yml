openapi: 3.0.3
info:
  title: Ecoomerce Game
  version: 1.0.0
  description: 'Challenger python, create a game store with some specific functions,
    such as sorting, filtering and listing; in addition to valid cart management. '
paths:
  /api/accounts/:
    get:
      operationId: accounts_retrieve
      tags:
      - accounts
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    post:
      operationId: accounts_create
      tags:
      - accounts
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    patch:
      operationId: accounts_partial_update
      tags:
      - accounts
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    delete:
      operationId: accounts_destroy
      tags:
      - accounts
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/cart/:
    get:
      operationId: cart_retrieve
      tags:
      - cart
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/cart/{id}/:
    get:
      operationId: cart_retrieve_2
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - cart
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/games/:
    get:
      operationId: games_list
      parameters:
      - in: query
        name: name
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - in: query
        name: price
        schema:
          type: number
          format: float
      - in: query
        name: price_gte
        schema:
          type: number
          format: float
      - in: query
        name: price_lte
        schema:
          type: number
          format: float
      - in: query
        name: score
        schema:
          type: integer
      - in: query
        name: score_gte
        schema:
          type: integer
      - in: query
        name: score_lte
        schema:
          type: integer
      tags:
      - games
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Games'
          description: ''
  /api/load_json/:
    post:
      operationId: load_json_create
      tags:
      - load_json
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/login/:
    post:
      operationId: login_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /api/orders/:
    get:
      operationId: orders_retrieve
      tags:
      - orders
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    post:
      operationId: orders_create
      tags:
      - orders
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/orders/{id}/:
    get:
      operationId: orders_retrieve_2
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - orders
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    patch:
      operationId: orders_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - orders
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    delete:
      operationId: orders_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - orders
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
components:
  schemas:
    Games:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          maxLength: 100
        price:
          type: number
          format: double
        score:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        image:
          type: string
          maxLength: 100
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - id
      - image
      - name
      - price
      - score
      - updated_at
    TokenObtainPair:
      type: object
      properties:
        username:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - password
      - refresh
      - username
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
